{"version":3,"sources":["utils/utils.js","utils/botutils.js","components/api_wrapper.js","components/list.js","App.js","reportWebVitals.js","index.js"],"names":["dateToRelativeDate","date","DateTime","fromISO","setLocale","toRelativeCalendar","orderBots","APIData","botNames","newAPIData","botName","bot","name","push","baseURL","url","encodeURIComponent","getBotNames","a","fetch","method","headers","resp","ok","console","error","Error","json","data","botList","getLastRenewed","pk","createPk","keyword","ListTable","useState","setAPIData","spinnerLoading","setSpinnerLoading","useEffect","pks","map","e","total_bots","length","document","title","num_req_finished","substring","fetchAPI","style","textAlign","type","color","height","width","visible","Table","celled","className","Header","Row","HeaderCell","item","i","Body","Cell","Footer","colSpan","Menu","floated","pagination","Item","as","icon","Icon","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3be1c001.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\n\nexport function dateToRelativeDate(date) {\n    const myMoment = DateTime.fromISO(date);\n    return myMoment.setLocale('ca').toRelativeCalendar()\n}","\nexport const orderBots = (APIData, botNames) => {\n    const newAPIData = []\n    for (const botName of botNames) {\n        for (const bot of APIData) {\n            if (botName === bot.name) {\n                newAPIData.push(bot);\n                continue;\n            }\n        }\n    }\n    return newAPIData\n}\n\n","export const baseURL = 'https://zi9bgvb5e3.execute-api.eu-west-3.amazonaws.com/Prod/';\n\n// const { REACT_APP_API_AUTHORIZATION } = process.env;\n\nconst pk = \"BOT#BMR\";\nconst url = `${baseURL}${encodeURIComponent(pk)}`;\n\nexport const getBotNames = async () => {\n    // console.log(`REACT_APP_API_AUTHORIZATION = ${REACT_APP_API_AUTHORIZATION}`);\n\n    const resp = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            // AuthorizationToken: REACT_APP_API_AUTHORIZATION,\n        }\n    });\n    if (!resp.ok) {\n        console.error(resp);\n        throw new Error('Error with request: ' + url);\n    }\n    const data = await resp.json()\n    if (data.data && data.data && data.data.botList) {\n        return data.data.botList;\n    }\n    return [];\n}\n\nexport const getLastRenewed = async (pk) => {\n    let url = `${baseURL}${encodeURIComponent(pk)}`;\n\n    // if (num_req_finished === 1 || num_req_finished === 2) { url += '4' }\n    const resp = await fetch(url, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n    });\n\n    if (!resp.ok) {\n        console.error('Error with request on pk: ' + pk);\n        console.error(resp);\n        return null;\n    }\n\n    return await resp.json();\n}\n","import React, { useState, useEffect } from 'react'\nimport { Icon, Menu, Table } from 'semantic-ui-react'\nimport Loader from \"react-loader-spinner\";\nimport { dateToRelativeDate } from '../utils/utils';\nimport { orderBots } from '../utils/botutils';\nimport { getBotNames, getLastRenewed } from './api_wrapper';\n\nconst createPk = (keyword) => `LR#${keyword}`;\n// const createSk = dateFormatted => `#DATE#${dateFormatted}`;\n\nfunction ListTable() {\n\n    const [APIData, setAPIData] = useState([]);\n    const [spinnerLoading, setSpinnerLoading] = useState(true);\n\n    useEffect(() => {\n        async function fetchAPI() {\n            const botNames = await getBotNames();\n            const pks = botNames.map(e => createPk(e))\n            const total_bots = botNames.length;\n            document.title = 'Bot Manager';\n            let num_req_finished = 0;\n            for (const pk of pks) {\n\n                const data = await getLastRenewed(pk);\n\n                num_req_finished++;\n\n                if (!data) { continue; }\n\n                data.name = data.pk.substring(3);\n                data.date = dateToRelativeDate(data.date);\n                setAPIData(APIData => [...APIData, data]);\n\n                setAPIData(APIData => orderBots(APIData, botNames))\n                if (num_req_finished === total_bots) {\n                    setSpinnerLoading(false);\n                }\n            }\n        }\n\n        fetchAPI();\n\n    }, [setAPIData])\n    return (\n        <div style={{ textAlign: \"center\" }} >\n\n            <Loader\n                // textAlign=\"center\"\n                type=\"TailSpin\"\n                color=\"#00BFFF\"\n                height={50}\n                width={50}\n                visible={spinnerLoading}\n            />\n\n            <Table celled className=\"list-table\">\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Nom del Bot</Table.HeaderCell>\n                        <Table.HeaderCell textAlign='right'>Ãšltim Renovat</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                {APIData && APIData.map((item, i) => (\n                    < Table.Body key={i}>\n                        <Table.Row>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell textAlign='right'>{item.date}</Table.Cell>\n                        </Table.Row>\n                    </Table.Body>\n\n                ))}\n\n                <Table.Footer>\n                    <Table.Row>\n                        <Table.HeaderCell colSpan='3'>\n                            <Menu floated='right' pagination>\n                                <Menu.Item as='a' icon>\n                                    <Icon name='chevron left' />\n                                </Menu.Item>\n                                <Menu.Item as='a'>1</Menu.Item>\n                                <Menu.Item as='a'>2</Menu.Item>\n                                <Menu.Item as='a'>3</Menu.Item>\n                                <Menu.Item as='a'>4</Menu.Item>\n                                <Menu.Item as='a' icon>\n                                    <Icon name='chevron right' />\n                                </Menu.Item>\n                            </Menu>\n                        </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Footer>\n            </Table >\n        </div >\n\n    )\n}\n\nexport default ListTable\n","import './App.css';\nimport ListTable from \"./components/list\";\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <h2 className=\"main-header\">Bot Manager Pro</h2>\n      <div>\n        <ListTable />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}