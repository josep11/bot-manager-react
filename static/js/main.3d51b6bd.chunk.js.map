{"version":3,"sources":["components/list.js","utils/utils.js","App.js","reportWebVitals.js","index.js"],"names":["botNames","pks","map","e","total_bots","length","ListTable","useState","APIData","setAPIData","spinnerLoading","setSpinnerLoading","useEffect","document","title","num_req_finished","pk","url","encodeURIComponent","axios","get","headers","then","response","date","data","substring","DateTime","fromFormat","setLocale","toRelativeCalendar","finally","style","textAlign","type","color","height","width","visible","Table","celled","className","Header","Row","HeaderCell","item","i","Body","Cell","Footer","colSpan","Menu","floated","pagination","Item","as","icon","Icon","name","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3d51b6bd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Icon, Menu, Table } from 'semantic-ui-react'\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport { dateToRelativeDate } from '../utils/utils';\n\nconst createPk = (keyword) => `LR#${keyword}`;\n// const createSk = dateFormatted => `#DATE#${dateFormatted}`;\n\nconst botNames = [ //TODO: parametrise somewhere else\n    'Feinaactiva',\n    'Infofeina',\n    'Milanuncios',\n    'Wallapop',\n    'DigitalNomads'\n];\nconst pks = botNames.map(e => createPk(e))\nconst total_bots = botNames.length;\nconst baseURL = 'https://zi9bgvb5e3.execute-api.eu-west-3.amazonaws.com/Prod/';\n\nfunction ListTable() {\n\n    const [APIData, setAPIData] = useState([]);\n    const [spinnerLoading, setSpinnerLoading] = useState(true);\n\n    useEffect(() => {\n        document.title = 'Bot Manager';\n        let num_req_finished = 0;\n        for (const pk of pks) {\n            const url = `${baseURL}${encodeURIComponent(pk)}`;\n            axios\n                .get(url, {\n                    headers: { 'Content-Type': 'application/json' }\n                })\n                .then((response) => {\n                    response.data.pk = response.data.pk.substring(3);\n                    response.data.date = dateToRelativeDate(response.data.date);\n                    setAPIData(APIData => [...APIData, response.data]);\n                })\n                // .catch(err => {\n                //     // console.error('THERE was an error');\n                //     console.error(err);\n                // })\n                // eslint-disable-next-line no-loop-func\n                .finally(() => {\n                    if (++num_req_finished === total_bots) {\n                        setSpinnerLoading(false);\n                    }\n                })\n        }\n\n    }, [setAPIData])\n    return (\n        <div style={{ textAlign: \"center\" }} >\n\n            <Loader\n                // textAlign=\"center\"\n                type=\"TailSpin\"\n                color=\"#00BFFF\"\n                height={50}\n                width={50}\n                visible={spinnerLoading}\n            />\n\n            <Table celled className=\"list-table\">\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Nom del Bot</Table.HeaderCell>\n                        <Table.HeaderCell textAlign='right'>Ãšltim Renovat</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                {APIData && APIData.map((item, i) => (\n                    < Table.Body key={i}>\n                        <Table.Row>\n                            <Table.Cell>{item.pk}</Table.Cell>\n                            <Table.Cell textAlign='right'>{item.date}</Table.Cell>\n                        </Table.Row>\n                    </Table.Body>\n\n                ))}\n\n                <Table.Footer>\n                    <Table.Row>\n                        <Table.HeaderCell colSpan='3'>\n                            <Menu floated='right' pagination>\n                                <Menu.Item as='a' icon>\n                                    <Icon name='chevron left' />\n                                </Menu.Item>\n                                <Menu.Item as='a'>1</Menu.Item>\n                                <Menu.Item as='a'>2</Menu.Item>\n                                <Menu.Item as='a'>3</Menu.Item>\n                                <Menu.Item as='a'>4</Menu.Item>\n                                <Menu.Item as='a' icon>\n                                    <Icon name='chevron right' />\n                                </Menu.Item>\n                            </Menu>\n                        </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Footer>\n            </Table >\n        </div >\n\n    )\n}\n\nexport default ListTable\n","import { DateTime } from 'luxon';\n\nexport function dateToRelativeDate(date) {\n    const DATEFORMAT = 'yyyy-MM-dd';\n    const myMoment = DateTime.fromFormat(date, DATEFORMAT);\n    return myMoment.setLocale('ca').toRelativeCalendar()\n}","import './App.css';\nimport ListTable from \"./components/list\";\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <h2 className=\"main-header\">Bot Manager</h2>\n      <div>\n        <ListTable />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}