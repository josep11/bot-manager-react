{"version":3,"sources":["utils/utils.js","utils/botutils.js","components/api_wrapper.js","components/list.js","App.js","reportWebVitals.js","index.js"],"names":["dateToRelativeDate","date","DateTime","fromISO","setLocale","toRelativeCalendar","orderBots","APIData","botNames","newAPIData","botName","bot","name","push","baseURL","url","encodeURIComponent","getBotNames","a","console","log","process","axios","get","headers","resp","status","error","Error","data","botList","createPk","keyword","ListTable","useState","setAPIData","spinnerLoading","setSpinnerLoading","useEffect","pks","map","e","total_bots","length","document","title","num_req_finished","pk","then","response","substring","finally","fetchAPI","style","textAlign","type","color","height","width","visible","Table","celled","className","Header","Row","HeaderCell","item","i","Body","Cell","Footer","colSpan","Menu","floated","pagination","Item","as","icon","Icon","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.09e36a7e.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\n\nexport function dateToRelativeDate(date) {\n    const myMoment = DateTime.fromISO(date);\n    return myMoment.setLocale('ca').toRelativeCalendar()\n}","\nexport const orderBots = (APIData, botNames) => {\n    const newAPIData = []\n    for (const botName of botNames) {\n        for (const bot of APIData) {\n            if (botName === bot.name) {\n                newAPIData.push(bot);\n                continue;\n            }\n        }\n    }\n    return newAPIData\n}\n\n","import axios from \"axios\";\n\nexport const baseURL = 'https://zi9bgvb5e3.execute-api.eu-west-3.amazonaws.com/Prod/';\n\nconst { REACT_APP_API_AUTHORIZATION } = process.env;\n\nconst pk = \"BOT#BMR\";\nconst url = `${baseURL}${encodeURIComponent(pk)}`;\n\nexport const getBotNames = async () => {\n\n    console.log(process.env);\n    console.log(`REACT_APP_API_AUTHORIZATION = ${REACT_APP_API_AUTHORIZATION}`);\n\n    const resp = await axios\n        .get(url, {\n            headers: { 'Content-Type': 'application/json' }\n        });\n    if (resp.status !== 200) {\n        console.error(resp);\n        throw new Error('Error with request: ' + url);\n    }\n    if (resp.data && resp.data.data && resp.data.data.botList) {\n        return resp.data.data.botList;\n    }\n    return [];\n}\n","import React, { useState, useEffect } from 'react'\nimport { Icon, Menu, Table } from 'semantic-ui-react'\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport { dateToRelativeDate } from '../utils/utils';\nimport { orderBots } from '../utils/botutils';\nimport { baseURL, getBotNames } from './api_wrapper';\n\nconst createPk = (keyword) => `LR#${keyword}`;\n// const createSk = dateFormatted => `#DATE#${dateFormatted}`;\n\nfunction ListTable() {\n\n    const [APIData, setAPIData] = useState([]);\n    const [spinnerLoading, setSpinnerLoading] = useState(true);\n\n    useEffect(() => {\n        async function fetchAPI() {\n            const botNames = await getBotNames();\n            const pks = botNames.map(e => createPk(e))\n            const total_bots = botNames.length;\n            document.title = 'Bot Manager';\n            let num_req_finished = 0;\n            for (const pk of pks) {\n                const url = `${baseURL}${encodeURIComponent(pk)}`;\n                axios\n                    .get(url, {\n                        headers: { 'Content-Type': 'application/json' }\n                    })\n                    .then((response) => {\n                        response.data.name = response.data.pk.substring(3);\n                        response.data.date = dateToRelativeDate(response.data.date);\n                        setAPIData(APIData => [...APIData, response.data]);\n                    })\n                    // .catch(err => {\n                    //     // console.error('THERE was an error');\n                    //     console.error(err);\n                    // })\n                    // eslint-disable-next-line no-loop-func\n                    .finally(() => {\n                        setAPIData(APIData => orderBots(APIData, botNames))\n                        if (++num_req_finished === total_bots) {\n                            setSpinnerLoading(false);\n                        }\n                    })\n            }\n        }\n\n        fetchAPI();\n\n    }, [setAPIData])\n    return (\n        <div style={{ textAlign: \"center\" }} >\n\n            <Loader\n                // textAlign=\"center\"\n                type=\"TailSpin\"\n                color=\"#00BFFF\"\n                height={50}\n                width={50}\n                visible={spinnerLoading}\n            />\n\n            <Table celled className=\"list-table\">\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Nom del Bot</Table.HeaderCell>\n                        <Table.HeaderCell textAlign='right'>Ãšltim Renovat</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                {APIData && APIData.map((item, i) => (\n                    < Table.Body key={i}>\n                        <Table.Row>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell textAlign='right'>{item.date}</Table.Cell>\n                        </Table.Row>\n                    </Table.Body>\n\n                ))}\n\n                <Table.Footer>\n                    <Table.Row>\n                        <Table.HeaderCell colSpan='3'>\n                            <Menu floated='right' pagination>\n                                <Menu.Item as='a' icon>\n                                    <Icon name='chevron left' />\n                                </Menu.Item>\n                                <Menu.Item as='a'>1</Menu.Item>\n                                <Menu.Item as='a'>2</Menu.Item>\n                                <Menu.Item as='a'>3</Menu.Item>\n                                <Menu.Item as='a'>4</Menu.Item>\n                                <Menu.Item as='a' icon>\n                                    <Icon name='chevron right' />\n                                </Menu.Item>\n                            </Menu>\n                        </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Footer>\n            </Table >\n        </div >\n\n    )\n}\n\nexport default ListTable\n","import './App.css';\nimport ListTable from \"./components/list\";\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <h2 className=\"main-header\">Bot Manager Pro</h2>\n      <div>\n        <ListTable />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}