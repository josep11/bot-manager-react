{"version":3,"sources":["components/list.js","utils/utils.js","App.js","reportWebVitals.js","index.js"],"names":["pks","map","e","ListTable","useState","APIData","setAPIData","useEffect","document","title","pk","url","encodeURIComponent","axios","get","headers","then","response","date","data","substring","DateTime","fromFormat","setLocale","toRelativeCalendar","Table","celled","className","Header","Row","HeaderCell","textAlign","item","i","Body","Cell","ribbon","Footer","colSpan","Menu","floated","pagination","Item","as","icon","Icon","name","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+QAcMA,EANW,CACb,cACA,YACA,cACA,YAEiBC,KAAI,SAAAC,GAAC,MATT,aASsBA,MAqExBC,MAlEf,WAEI,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAuBA,OArBAC,qBAAU,WACNC,SAASC,MAAQ,cADL,oBAGKT,GAHL,IAGZ,2BAAsB,CAAC,IAAZU,EAAW,QACZC,EAAG,UAVL,gEAUK,OAAgBC,mBAAmBF,IAC5CG,IACKC,IAAIH,EAAK,CACNI,QAAS,CAAE,eAAgB,sBAE9BC,MAAK,SAACC,GC5BhB,IAA4BC,ED6BfD,EAASE,KAAKT,GAAKO,EAASE,KAAKT,GAAGU,UAAU,GAC9CH,EAASE,KAAKD,MC9BCA,ED8ByBD,EAASE,KAAKD,KC5BrDG,WAASC,WAAWJ,EADlB,cAEHK,UAAU,MAAMC,sBD4BhBlB,GAAW,SAAAD,GAAO,4BAAQA,GAAR,CAAiBY,EAASE,cAZ5C,iCAoBb,CAACb,IAEA,eAACmB,EAAA,EAAD,CAAOC,QAAM,EAACC,UAAU,aAAxB,UACI,cAACF,EAAA,EAAMG,OAAP,UACI,eAACH,EAAA,EAAMI,IAAP,WACI,cAACJ,EAAA,EAAMK,WAAP,0BACA,cAACL,EAAA,EAAMK,WAAP,CAAkBC,UAAU,QAA5B,mCAIP1B,GAAWA,EAAQJ,KAAI,SAAC+B,EAAMC,GAAP,OACpB,cAAER,EAAA,EAAMS,KAAR,UACI,eAACT,EAAA,EAAMI,IAAP,WACI,cAACJ,EAAA,EAAMU,KAAP,CAAYC,QAAM,EAAlB,SAAoBJ,EAAKtB,KACzB,cAACe,EAAA,EAAMU,KAAP,CAAYJ,UAAU,QAAtB,SAA+BC,EAAKd,WAH1Be,MAStB,cAACR,EAAA,EAAMY,OAAP,UACI,cAACZ,EAAA,EAAMI,IAAP,UACI,cAACJ,EAAA,EAAMK,WAAP,CAAkBQ,QAAQ,IAA1B,SACI,eAACC,EAAA,EAAD,CAAMC,QAAQ,QAAQC,YAAU,EAAhC,UACI,cAACF,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAIC,MAAI,EAAtB,SACI,cAACC,EAAA,EAAD,CAAMC,KAAK,mBAEf,cAACP,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAd,eACA,cAACJ,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAd,eACA,cAACJ,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAd,eACA,cAACJ,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAd,eACA,cAACJ,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAIC,MAAI,EAAtB,SACI,cAACC,EAAA,EAAD,CAAMC,KAAK,iCE1D5BC,MAZf,WACE,OACE,sBAAKpB,UAAU,OAAf,UACE,oBAAIA,UAAU,cAAd,yBACA,8BACE,cAAC,EAAD,UCIOqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlD,SAASmD,eAAe,SAM1BX,K","file":"static/js/main.4fba6531.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Icon, Menu, Table } from 'semantic-ui-react'\nimport axios from \"axios\";\nimport { dateToRelativeDate } from '../utils/utils';\n\nconst createPk = (keyword) => `LR#${keyword}`;\n// const createSk = dateFormatted => `#DATE#${dateFormatted}`;\n\nconst botNames = [ //TODO: parametrise somewhere else\n    'Feinaactiva',\n    'Infofeina',\n    'Milanuncios',\n    'Wallapop'\n];\nconst pks = botNames.map(e => createPk(e))\nconst baseURL = 'https://zi9bgvb5e3.execute-api.eu-west-3.amazonaws.com/Prod/';\n\nfunction ListTable() {\n\n    const [APIData, setAPIData] = useState([]);\n\n    useEffect(() => {\n        document.title = 'Bot Manager';\n\n        for (const pk of pks) {\n            const url = `${baseURL}${encodeURIComponent(pk)}`;\n            axios\n                .get(url, {\n                    headers: { 'Content-Type': 'application/json' }\n                })\n                .then((response) => {\n                    response.data.pk = response.data.pk.substring(3);\n                    response.data.date = dateToRelativeDate(response.data.date);\n                    setAPIData(APIData => [...APIData, response.data]);\n                })\n            // .catch(err => {\n            //     // console.error('THERE was an error');\n            //     console.error(err);\n            // })\n        }\n\n    }, [setAPIData])\n    return (\n        <Table celled className=\"list-table\">\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Nom del Bot</Table.HeaderCell>\n                    <Table.HeaderCell textAlign='right'>Ãšltim Renovat</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            {APIData && APIData.map((item, i) => (\n                < Table.Body key={i}>\n                    <Table.Row>\n                        <Table.Cell ribbon>{item.pk}</Table.Cell>\n                        <Table.Cell textAlign='right'>{item.date}</Table.Cell>\n                    </Table.Row>\n                </Table.Body>\n\n            ))}\n\n            <Table.Footer>\n                <Table.Row>\n                    <Table.HeaderCell colSpan='3'>\n                        <Menu floated='right' pagination>\n                            <Menu.Item as='a' icon>\n                                <Icon name='chevron left' />\n                            </Menu.Item>\n                            <Menu.Item as='a'>1</Menu.Item>\n                            <Menu.Item as='a'>2</Menu.Item>\n                            <Menu.Item as='a'>3</Menu.Item>\n                            <Menu.Item as='a'>4</Menu.Item>\n                            <Menu.Item as='a' icon>\n                                <Icon name='chevron right' />\n                            </Menu.Item>\n                        </Menu>\n                    </Table.HeaderCell>\n                </Table.Row>\n            </Table.Footer>\n        </Table >\n    )\n}\n\nexport default ListTable\n","import { DateTime } from 'luxon';\n\nexport function dateToRelativeDate(date) {\n    const DATEFORMAT = 'yyyy-MM-dd';\n    const myMoment = DateTime.fromFormat(date, DATEFORMAT);\n    return myMoment.setLocale('ca').toRelativeCalendar()\n}","import './App.css';\nimport ListTable from \"./components/list\";\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <h2 className=\"main-header\">Bot Manager</h2>\n      <div>\n        <ListTable />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}