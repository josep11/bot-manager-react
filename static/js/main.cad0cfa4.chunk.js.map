{"version":3,"sources":["components/list.js","App.js","reportWebVitals.js","index.js"],"names":["pks","map","e","ListTable","useState","APIData","setAPIData","useEffect","pk","url","encodeURIComponent","console","log","axios","get","headers","then","response","data","substring","catch","err","error","Table","celled","className","Header","Row","HeaderCell","item","i","Body","Cell","ribbon","textAlign","date","Footer","colSpan","Menu","floated","pagination","Item","as","icon","Icon","name","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAaMA,EANW,CACb,cACA,YACA,cACA,YAEiBC,KAAI,SAAAC,GAAC,MATT,aASsBA,MAuFxBC,MApFf,WAEI,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAoCA,OAlCAC,qBAAU,WAAM,oBAUKP,GAVL,IAUZ,2BAAsB,CAAC,IAAZQ,EAAW,QACZC,EAAG,UAjBL,gEAiBK,OAAgBC,mBAAmBF,IAE5CG,QAAQC,IAAIH,GAEZI,IACKC,IAAIL,EAAK,CACNM,QACI,CAAE,eAAgB,sBAEzBC,MAAK,SAACC,GAEHA,EAASC,KAAKV,GAAKS,EAASC,KAAKV,GAAGW,UAAU,GAE9Cb,GAAW,SAAAD,GAAO,4BAAQA,GAAR,CAAiBY,EAASC,UAC5CP,QAAQC,IAAIP,MAEfe,OAAM,SAAAC,GAEHV,QAAQW,MAAMD,OA7Bd,iCAiCb,CAACf,IAEA,eAACiB,EAAA,EAAD,CAAOC,QAAM,EAACC,UAAU,aAAxB,UACI,cAACF,EAAA,EAAMG,OAAP,UACI,eAACH,EAAA,EAAMI,IAAP,WACI,cAACJ,EAAA,EAAMK,WAAP,uBAEA,cAACL,EAAA,EAAMK,WAAP,wBAIPvB,GAAWA,EAAQJ,KAAI,SAAC4B,EAAMC,GAAP,OACpB,cAAEP,EAAA,EAAMQ,KAAR,UACI,eAACR,EAAA,EAAMI,IAAP,WAII,cAACJ,EAAA,EAAMS,KAAP,CAAYC,QAAM,EAAlB,SAAoBJ,EAAKrB,KAEzB,cAACe,EAAA,EAAMS,KAAP,CAAYE,UAAU,QAAtB,SAA+BL,EAAKM,WAP1BL,MAatB,cAACP,EAAA,EAAMa,OAAP,UACI,cAACb,EAAA,EAAMI,IAAP,UACI,cAACJ,EAAA,EAAMK,WAAP,CAAkBS,QAAQ,IAA1B,SACI,eAACC,EAAA,EAAD,CAAMC,QAAQ,QAAQC,YAAU,EAAhC,UACI,cAACF,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAIC,MAAI,EAAtB,SACI,cAACC,EAAA,EAAD,CAAMC,KAAK,mBAEf,cAACP,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAd,eACA,cAACJ,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAd,eACA,cAACJ,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAd,eACA,cAACJ,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAd,eACA,cAACJ,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAIC,MAAI,EAAtB,SACI,cAACC,EAAA,EAAD,CAAMC,KAAK,iCC3E5BC,MAZf,WACE,OACE,sBAAKrB,UAAU,OAAf,UACE,oBAAIA,UAAU,cAAd,yBACA,8BACE,cAAC,EAAD,UCIOsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.cad0cfa4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Icon, Menu, Table } from 'semantic-ui-react'\nimport axios from \"axios\";\n\nconst createPk = (keyword) => `LR#${keyword}`;\n// const createSk = dateFormatted => `#DATE#${dateFormatted}`;\n\nconst botNames = [ //TODO: parametrise somewhere else\n    'Feinaactiva',\n    'Infofeina',\n    'Milanuncios',\n    'Wallapop'\n];\nconst pks = botNames.map(e => createPk(e))\nconst baseURL = 'https://zi9bgvb5e3.execute-api.eu-west-3.amazonaws.com/Prod/';\n\nfunction ListTable() {\n\n    const [APIData, setAPIData] = useState([]);\n\n    useEffect(() => {\n        // TODO: remove this mock\n        // setAPIData([\n        //     { sk: '#DATE#2021-09-18', date: '2021-09-18', pk: 'MOCK' },\n        //     { sk: '#DATE#2021-09-21', date: '2021-09-21', pk: 'Infofeina' }\n        // ]);\n        // setAPIData(APIData => [...APIData,\n        // { sk: '#DATE#2021-09-18', date: '2021-09-18', pk: 'MOCK 222222' },\n        // ]);\n        // return;\n        for (const pk of pks) {\n            const url = `${baseURL}${encodeURIComponent(pk)}`;\n            // const url = `${baseURL}888`;\n            console.log(url);\n            // https://axios-http.com/docs/req_config\n            axios\n                .get(url, {\n                    headers:\n                        { 'Content-Type': 'application/json' }\n                })\n                .then((response) => {\n                    // console.log(response.data)\n                    response.data.pk = response.data.pk.substring(3);\n\n                    setAPIData(APIData => [...APIData, response.data]);\n                    console.log(APIData)\n                })\n                .catch(err => {\n                    // console.error('THERE was an error');\n                    console.error(err);\n                })\n        }\n\n    }, [setAPIData])\n    return (\n        <Table celled className=\"list-table\">\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Bot Name</Table.HeaderCell>\n                    {/* <Table.HeaderCell>PK</Table.HeaderCell> */}\n                    <Table.HeaderCell>Date</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            {APIData && APIData.map((item, i) => (\n                < Table.Body key={i}>\n                    <Table.Row>\n                        {/* <Table.Cell>\n        <Label ribbon>First</Label>\n    </Table.Cell> */}\n                        <Table.Cell ribbon>{item.pk}</Table.Cell>\n                        {/* <Table.Cell>{item.pk}</Table.Cell> */}\n                        <Table.Cell textAlign='right'>{item.date}</Table.Cell>\n                    </Table.Row>\n                </Table.Body>\n\n            ))}\n\n            <Table.Footer>\n                <Table.Row>\n                    <Table.HeaderCell colSpan='3'>\n                        <Menu floated='right' pagination>\n                            <Menu.Item as='a' icon>\n                                <Icon name='chevron left' />\n                            </Menu.Item>\n                            <Menu.Item as='a'>1</Menu.Item>\n                            <Menu.Item as='a'>2</Menu.Item>\n                            <Menu.Item as='a'>3</Menu.Item>\n                            <Menu.Item as='a'>4</Menu.Item>\n                            <Menu.Item as='a' icon>\n                                <Icon name='chevron right' />\n                            </Menu.Item>\n                        </Menu>\n                    </Table.HeaderCell>\n                </Table.Row>\n            </Table.Footer>\n        </Table >\n    )\n}\n\nexport default ListTable\n","import './App.css';\nimport ListTable from \"./components/list\";\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <h2 className=\"main-header\">Bot Manager</h2>\n      <div>\n        <ListTable />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}